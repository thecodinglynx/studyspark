generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String?
  username         String            @unique
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  passwordHash     String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  accounts         Account[]
  cardPerformances CardPerformance[]
  checklistEntries ChecklistEntry[]
  sessions         Session[]
  studySessions    StudySession[]
  subjects         Subject[]         @relation("SubjectOwner")
  sharedSubjects   SubjectShare[]
}

model Subject {
  id               String            @id @default(cuid())
  title            String
  description      String?
  ownerId          String
  studyGoal        Int               @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  type             SubjectType       @default(FLASHCARDS)
  cards            Card[]
  cardPerformances CardPerformance[]
  checklistEntries ChecklistEntry[]
  checklistItems   ChecklistItem[]
  sessions         StudySession[]
  owner            User              @relation("SubjectOwner", fields: [ownerId], references: [id])
  shares           SubjectShare[]
}

model Card {
  id           String            @id @default(cuid())
  prompt       String
  answer       String
  subjectId    String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  subject      Subject           @relation(fields: [subjectId], references: [id])
  performances CardPerformance[]
}

model CardPerformance {
  id             String    @id @default(cuid())
  cardId         String
  subjectId      String
  userId         String
  correctCount   Int       @default(0)
  incorrectCount Int       @default(0)
  lastStudiedAt  DateTime?
  card           Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  subject        Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([cardId, userId])
  @@index([subjectId, userId])
}

model ChecklistItem {
  id          String           @id @default(cuid())
  subjectId   String
  title       String
  description String?
  position    Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  entries     ChecklistEntry[]
  subject     Subject          @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@index([subjectId, position])
}

model ChecklistEntry {
  id          String        @id @default(cuid())
  subjectId   String
  itemId      String
  userId      String
  practicedAt DateTime      @default(now())
  item        ChecklistItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  subject     Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id])

  @@index([subjectId, userId, practicedAt])
  @@index([itemId, practicedAt])
}

model SubjectShare {
  id        String    @id @default(cuid())
  role      ShareRole @default(VIEWER)
  subjectId String
  userId    String
  createdAt DateTime  @default(now())
  subject   Subject   @relation(fields: [subjectId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([subjectId, userId])
}

model StudySession {
  id          String   @id @default(cuid())
  userId      String
  subjectId   String
  studiedAt   DateTime @default(now())
  correct     Int
  incorrect   Int
  durationMin Int
  cardCount   Int      @default(0)
  subject     Subject  @relation(fields: [subjectId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SubjectType {
  FLASHCARDS
  CHECKLIST
}

enum ShareRole {
  VIEWER
  EDITOR
}
