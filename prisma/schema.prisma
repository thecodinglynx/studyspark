generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("NEON_DATABASE_URL")
  directUrl = env("NEON_DIRECT_URL")
}

enum ShareRole {
  VIEWER
  EDITOR
}

model User {
  id             String          @id @default(cuid())
  name           String?
  username       String          @unique
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  passwordHash   String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  subjects       Subject[]       @relation("SubjectOwner")
  sharedSubjects SubjectShare[]
  studySessions  StudySession[]
  accounts       Account[]
  sessions       Session[]
}

model Subject {
  id          String          @id @default(cuid())
  title       String
  description String?
  ownerId     String
  studyGoal   Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  owner       User            @relation("SubjectOwner", fields: [ownerId], references: [id])
  cards       Card[]
  shares      SubjectShare[]
  sessions    StudySession[]
}

model Card {
  id        String   @id @default(cuid())
  prompt    String
  answer    String
  subjectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subject   Subject  @relation(fields: [subjectId], references: [id])
}

model SubjectShare {
  id        String    @id @default(cuid())
  role      ShareRole @default(VIEWER)
  subjectId String
  userId    String
  createdAt DateTime  @default(now())
  subject   Subject   @relation(fields: [subjectId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([subjectId, userId])
}

model StudySession {
  id             String   @id @default(cuid())
  userId         String
  subjectId      String
  studiedAt      DateTime @default(now())
  correct        Int
  incorrect      Int
  durationMin    Int
  user           User     @relation(fields: [userId], references: [id])
  subject        Subject  @relation(fields: [subjectId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?        @db.Text
  access_token      String?        @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?        @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
